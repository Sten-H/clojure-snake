<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1442532648049">{:repl-history {:ide [], :local [&quot;(reset! rev-time (not @rev-time))&quot; &quot;(defn l [x] (&lt; 5 x 10))&quot; &quot;(l 7)&quot; &quot;(l 11)&quot; &quot;(&lt;= 0 x (dec block-amount))&quot; &quot;(defn l [x] (&lt;= 0 x (dec 40)))&quot; &quot;(defn l [x] (&gt; 0 x (dec 40)))&quot; &quot;(l 35)&quot; &quot;(l 40)&quot; &quot;(l 39)&quot; &quot;(defn l [x] (&gt; 0 x 40))&quot; &quot;(defn l [x] (&gt; x 0 40))&quot; &quot;(l 41)&quot; &quot;(l 4)&quot; &quot;(l 0)&quot; &quot;(&lt; 1 2 3 4)&quot; &quot;(&lt; 3 2 3 4)&quot; &quot;(-&gt; (range 1 10)\n    vec)&quot; &quot;(-&gt; (range 1 10)\n    vec\n    cons 5)&quot; &quot;(-&gt; (range 1 10)\n    vec\n    (cons 5))&quot; &quot;(-&gt; (range 1 10)\n    (vec)\n    (cons 5))&quot; &quot;(-&gt; (range 1 10)\n    (cons 5))&quot; &quot;(-&gt; (range 1 10)\n    (cons 5 %))&quot; &quot;(-&gt; (range 1 10)\n    (conj 5))&quot; &quot;(conj 5 '(1 23))&quot; &quot;(conj '(1 2 3) 5)&quot; &quot;(cons '(1 2 3) 5)&quot; &quot;(cons 5 '(1 2 3) )&quot; &quot;(conj [1 2 3] 5)&quot; &quot;(-&gt; (range 1 10)\n    (conj 5)\n    (vec))&quot; &quot;(-&gt;&gt; (range 1 10)\n    (conj 5)\n    (vec))&quot; &quot;(-&gt;&gt; \n    (conj 5)\n    (vec)\n    (range 1 10))&quot; &quot;(-&gt;&gt;\n    (vec)\n    (range 1 10))&quot; &quot;(-&gt;&gt; (range 1 10)\n    \n    (vec))&quot; &quot;(-&gt;&gt; (range 1 10)\n    (cons 5)\n    (reverse))&quot; &quot;(-&gt;&gt; (range 1 10)\n    (conj 5))&quot; &quot;(-&gt;&gt; (range 1 10)\n    (cons 5))&quot; &quot;(-&gt;&gt; (range 1 10)\n    (conj % 5))&quot; &quot;(take 10 (repeat 10))&quot; &quot;(take 10 (range))&quot; &quot;(-&gt; (range)\n    (take 10))&quot; &quot;(macroexpand '(-&gt; (range)\n                 (take 10))) &quot; &quot;(-&gt;&gt; (range)\n    (take 10))&quot; &quot;(macr) (-&gt;&gt; (range)\n    (take 10))&quot; &quot;(macroexpand '(-&gt;&gt; (range)\n                 (take 10))) &quot; &quot;(macroexpand '(-&gt;&gt; (range)\n                 (take 10)\n                 (filter even?))) &quot; &quot;(-&gt;&gt; (range)\n                 (take 10)\n                 (filter even?)) &quot; &quot;(-&gt; (range)\n                 (take 10)\n                 (filter even?)) &quot; &quot;(macroexpand '(-&gt; (range)\n                 (take 10)\n                 (filter even?))) &quot; &quot;(-&gt;&gt; [[1 2] [1 3] [2 5]]\n     (get (set [[1 2]]))\n     (filter nil?))&quot; &quot;(-&gt;&gt; [[1 2] [1 3] [2 5]]\n     (get (set [[1 2]]) )\n     (filter nil?))&quot; &quot;(filter nil? (get (set [[1 2]]) [[1 2] [1 3] [2 5]]))&quot; &quot;(set [[1 2]])&quot; &quot;(macroexpand '(-&gt; [[1 2] [1 3] [2 5]]\n                  (get (set [[1 2]]))\n                  (filter nil?))) &quot; &quot;(macroexpand '(-&gt;&gt; [[1 2] [1 3] [2 5]]\n                  (get (set [[1 2]]))\n                  (filter nil?))) &quot; &quot;(get (set [[1 2]]) [[1 2] [1 3] [2 5]])&quot; &quot;(get (set [1 2]) [[1 2] [1 3] [2 5]])&quot; &quot;(get (set [[1 2]]) [[1 2] [1 3]])&quot; &quot;(get (set [[1 2] [1 3]]) [[1 2] [1 3]])&quot; &quot;(def s #{[1 2]})&quot; &quot;(get s [[1 2] [3 4]])&quot; &quot;(get [[1 2] [3 4]] s)&quot; &quot;(get-in)&quot; &quot;(get-in [[1 2] [3 4]] s)&quot; &quot;(get-in s [[1 2] [3 4]])&quot; &quot;#((get s %) [[1 2]])&quot; &quot;(defn crap [x] (get s x))&quot; &quot;(defn crap [x] (get x s))&quot; &quot;(crap  [[1 2]])&quot; &quot;(crap  [1 2])&quot; &quot;(-&gt;&gt; @block-matrix\n     (get (set body))\n     (filter nil?))&quot; &quot;(macroexpand '(-&gt;&gt; @block-matrix\n                   (get (set body))\n                   (filter nil?))) &quot; &quot;(disj #{[1 2]})&quot; &quot;(disj #{[1 2]} [1 2])&quot; &quot;(disj #{[1 2]} [[1 2] [3 4]])&quot; &quot;(disj #{[1 2] [3 4]} [[1 2] [3 4] [4 5]])&quot; &quot;(disj #{[1 2] [3 4] [4 5]} [[1 2] [3 4] [4 5]])&quot; &quot;(disj #{[1 2] [3 4] [4 5]} [[1 2] [3 4] [4 5] [6 5]])&quot; &quot;(remove #{[1 2] [3 4] [4 5]} [[1 2] [3 4] [4 5] [6 5]])&quot; &quot;(def body [[1 2] [3 4]])&quot; &quot;(vec (conj body (nth body (dec (count body))))))&quot; &quot;(vec (conj body (nth body (dec (count body)))))&quot; &quot;(-&gt; body\n    (dec (count)))&quot; &quot;(-&gt; body\n    (count)\n    (dec))&quot; &quot;(-&gt;&gt; body\n    (count)\n    (dec)\n    (nth body))&quot; &quot;(-&gt;&gt; body\n    (count)\n    (dec)\n    (nth body)\n    (conj body))&quot; &quot;(def body [[1 2] [3 5] [5 7]])&quot; &quot;body&quot; &quot;(pop body)&quot; &quot;(-&gt;&gt; body\n    (pop)\n    (cons [10 10]))&quot; &quot;(when-let [x 5] (&lt; x 10) (println x))&quot; &quot;(when-let [x 5] (&gt; x 10) (println x))&quot; &quot;(when-let [x 5] (&gt; x 10) (println \&quot;a\&quot;))&quot; &quot;(when-let [a nil b nil] (println \&quot;a\&quot;))&quot; &quot;(when-let [a nil] (println \&quot;a\&quot;))&quot; &quot;(when-let [a 5] (println \&quot;a\&quot;))&quot; &quot;(true? true)&quot; &quot;(true? false)&quot; &quot;(load-file \&quot;src/snake/core.clh\&quot;)&quot; &quot;(is-dead?)&quot; &quot;(load-file \&quot;src/snake/core.clj\&quot;)&quot;], :remote []}}</component>
</project>