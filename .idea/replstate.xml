<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1429122725656">{:repl-history {:ide [], :local [&quot;(concat ([1 2] [1 3]))&quot; &quot;(concat '([1 2] [1 3]))&quot; &quot;(apply concat '([1 2] [1 3]))&quot; &quot;(apply concat (\&quot;hej\&quot; \&quot;jag\&quot; \&quot;heter\&quot;))&quot; &quot;(apply concat '(\&quot;hej\&quot; \&quot;jag\&quot; \&quot;heter\&quot;))&quot; &quot;(def result (map #(vec (zipmap (range 1 10) (repeat %))) (range 1 10)))&quot; &quot;(def result (map #(zipmap (range 1 10) (repeat %))) (range 1 10))&quot; &quot;(def result (map #(zipmap (range 1 10) (repeat %))(range 1 10)) )&quot; &quot;result&quot; &quot;(apply concat result)&quot; &quot;(vec (apply concat result))&quot; &quot;(rand 1)&quot; &quot;(rand-int 1)&quot; &quot;(rand-int 2\n          )&quot; &quot;(rand-int 2)&quot; &quot;(disj [1 2 34 42] #{[1 2]})&quot; &quot;(disj [1 2 34 42] [1 2])&quot; &quot;(disj #{[1 2]} [1 2])&quot; &quot;(def taken [[1 2] [3 4]])&quot; &quot;(set taken)&quot; &quot;(disj (set taken) [1 2])&quot; &quot;(disj (set taken) #{[3 4]})&quot; &quot;(disj (set taken) (vec #{[3 4]}))&quot; &quot;(vec #{[3 4]})&quot; &quot;(disj (set taken) (flatten (vec #{[3 4]})))&quot; &quot;(disj (set taken) (flatten (vec #{[3 4] [1 2]})))&quot; &quot;(vec (disj (set taken) [1 2]))&quot; &quot;(vec (disj (set taken) [1 2] [3 4]))&quot; &quot;(disj (set [[1 2] [3 4] [5]]) [1 2])&quot; &quot;(disj (set [[1 2] [3 4] [5]]) [[1 2] [3 4]])&quot; &quot;(disj (set [[1 2] [3 4] [5]]) (apply concat [[1 2] [3 4]]))&quot; &quot;(disj (set [[1 2] [3 4] [5]]) (flatten [[1 2] [3 4]]))&quot; &quot;(disj (set [[1 2] [3 4] [5]]) (set [[1 2] [3 4]]))&quot; &quot;(map #(disj (set taken) %) [[1 2] [3 4]])&quot; &quot;(let [tset (set taken)]\n  (map #(disj (set taken) %) [[1 2] [3 4]]))&quot; &quot;taken&quot; &quot;(let [tset (set taken)]\n  (map #(disj tset %) [1 2] [3 4]))&quot; &quot;(let [tset (set taken)]\n  (map #(disj tset %) [[1 2] [3 4]]))&quot; &quot;(get [1 2] #{[1 2]})&quot; &quot;(get #{[1 2]} [1 2])&quot; &quot;(get #{[1 2] [3 4]} [1 2])&quot; &quot;(filter #(nil? (get (set taken) %)) [[1 2]])&quot; &quot;(filter #(nil? (get (set taken) %)) [[1 2] [3 4]])&quot; &quot;(filter #(nil? (get (set taken) %)) [])&quot; &quot;(get (set taken) [1 2])&quot; &quot;(filter #(nil? (get (set [[1 2]]) %)) taken)&quot; &quot;(filter #(nil? (get (set [[1 2] [3 4]]) %)) taken)&quot; &quot;(load-file \&quot;core.clj\&quot;)&quot; &quot;(load-file \&quot;/src/snake/core.clj\&quot;)&quot; &quot;(defn get-matrix)&quot; &quot;(get-matrix)&quot; &quot;(snake-game/get-matrix)&quot; &quot;(snake-game.core/get-matrix)&quot; &quot;(rand nth (snake-game.core/get-free-squares))&quot; &quot;(rand-nth (snake-game.core/get-free-squares))&quot; &quot;(snake-game.core/get-free-squares)&quot; &quot;@snake-body&quot; &quot;(ns snake-game.core)&quot; &quot;(load-file \&quot;src/snake/core.clj\&quot;)&quot; &quot;(def snake-body (atom {:body [[0 0] [1 0] [2 0] [3 0]], :dir [0 1], :dead? false}))&quot; &quot;(let [{:keys [dead?]} @snake-body]\n  (if (or true true)\n    (swap! snake-body update-in [:dead?] reset! true)))&quot; &quot;snake-body&quot; &quot;(swap! snake-body update-in [:keys] not)&quot; &quot;(swap! snake-body update-in [:keys] swap! not)&quot; &quot;(swap! snake-body update-in [:keys] swap! #(not %) )&quot; &quot;(swap! snake-body update-in [:keys] swap! #(not))&quot; &quot;(swap! snake-body update-in [:keys] swap! #(or true))&quot; &quot;(swap! snake-body update-in [:keys] #(not ))&quot; &quot;(swap! snake-body update-in [:keys] #(not %))&quot; &quot;(swap! snake-body update-in [:dead?] #(true))&quot; &quot;(swap! snake-body update-in [:dead?] #(not %))&quot; &quot;(swap! snake-body update-in [:dead?] #(and true %))&quot; &quot;(swap! snake-body update-in [:dead?] #(true? true))&quot; &quot;(swap! snake-body update-in [:dead?] #(or true))&quot; &quot;(swap! snake-body update-in [:dead?] #(or true %))&quot; &quot;(doseq [g 1] (println g))&quot; &quot;(doseq [g (range 1 10)] (println g))&quot; &quot;(range 255 (- 255 (count '(1 2 3 4 5))))&quot; &quot;(range (- 255 (count '(1 2 3 4 5))) 255)&quot; &quot;(range)&quot; &quot;(range (- 255 (count '(1 2 3 4 5))) 255 20)&quot; &quot;(doc range)&quot; &quot;(def a 5)&quot; &quot;(set!)&quot; &quot;(set! a 3)&quot; &quot;(binding a 10)&quot; &quot;(def a 5 ^:private)&quot; &quot;(def a 5 :^private)&quot; &quot;(def a 5 :private)&quot; &quot;(def a 5 ^: dynamic)&quot; &quot;(def a 5 ^:dynamic)&quot; &quot;(def ^:dynamic a 5 )&quot; &quot;(binding [a 10]\n  a) (prinln a)&quot; &quot;(binding [a 10]\n  a)&quot; &quot;(println a)&quot; &quot;a&quot; &quot;(def reverse (atom false))&quot; &quot;(def rev-time (atom false))&quot; &quot;(reset! rev-time true)&quot; &quot;@rev-time&quot; &quot;(reset! rev-time (not @rev-time))&quot;], :remote []}}</component>
</project>